<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>The NAG Constructor Pattern</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ff3a9984-a817-400e-be0d-6231ad026f50" /><meta name="Description" content="This topic contains an article describing a design pattern first introduced in AsyncInit." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">AsyncInit<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="a920d297-289f-46ea-aa8b-338f484ad83c.htm" title="AsyncInit" tocid="roottoc">AsyncInit</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="e4e8dc54-685e-481b-bdec-c19ffb971294.htm" title="Miscellanea" tocid="e4e8dc54-685e-481b-bdec-c19ffb971294">Miscellanea</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ff3a9984-a817-400e-be0d-6231ad026f50.htm" title="NAG Constructor" tocid="ff3a9984-a817-400e-be0d-6231ad026f50">NAG Constructor</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn">The NAG Constructor Pattern</td></tr></table><span class="introStyle"></span><div class="summary"><p>This topic contains an article describing a design pattern first introduced in AsyncInit.</p></div><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Problem">The Problem</a></li><li class="outlineSectionEntry"><a href="#Solution">The Solution</a></li><li class="outlineSectionEntry"><a href="#Name">The Name</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="Problem"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The Problem</span></div><div id="ID1RBSection" class="collapsibleSection"><p>A base class may occasionally require subclasses to limit the visibility of their constructor(s). Common example:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">abstract</span> <span class="highlight-keyword">class</span> Singleton&lt;T&gt;
    <span class="highlight-keyword">where</span> T : Singleton&lt;T&gt;
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> T Instance;

    <span class="highlight-keyword">static</span> Singleton()
    {
        Instance = <span class="highlight-keyword">new</span> System.Lazy&lt;T&gt;(CreateInstance).Value;
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> T CreateInstance()
    {
        <span class="highlight-keyword">return</span> (T)System.Activator.CreateInstance(<span class="highlight-keyword">typeof</span>(T), <span class="highlight-keyword">true</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACADAAA");</script><p>
        The <span class="code">true</span> bit instructs <span class="code">Activator</span> to
        <a href="http://msdn2.microsoft.com/en-us/library/he47tyc4" target="_blank">look for a non-public constructor, but not to require it</a>.
        This means that a subclass could easily forgo the private constructor (by e.g. declaring no constructor at all), which would defeat the whole purpose of it trying to be a singleton.
      </p><p>Ideally, we would like to enforce this at compilation time. C# affords us the <span class="code">new</span> constraint:
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">abstract</span> <span class="highlight-keyword">class</span> NotSingleton&lt;T&gt;
    <span class="highlight-keyword">where</span> T : NotSingleton&lt;T&gt;, <span class="highlight-keyword">new</span>()
{
    <span class="highlight-comment">//...</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAADAAA");</script>
        but not its opposite. Something along the lines of
        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">abstract</span> <span class="highlight-keyword">class</span> Singleton&lt;T&gt;
    <span class="highlight-keyword">where</span> T : Singleton&lt;T&gt;, ~<span class="highlight-keyword">new</span>()
{
    <span class="highlight-comment">//...</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAADAAA");</script>
        would be great, but currently results in a compilation error for the wrong class.</p></div><div class="collapsibleAreaRegion" id="Solution"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The Solution</span></div><div id="ID2RBSection" class="collapsibleSection"><p><span class="code">AsyncInitBase&lt;T&gt;</span>, a class not too dissimilar from the above <span class="code">Singleton&lt;T&gt;</span>, contains the following code:
          <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Deriving types should define a private parameterless constructor.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="dummy"&gt;Dummy parameter (safe to pass &lt;c&gt;null&lt;/c&gt;).&lt;/param&gt;</span>
<span class="highlight-keyword">protected</span> AsyncInitBase(<span class="highlight-keyword">object</span> dummy)
{
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABACAAA");</script></p><p>Its goal is to enforce implementors to define a constructor of their own, with the hope that it indeed be a private one.</p></div><div class="collapsibleAreaRegion" id="Name"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The Name</span></div><div id="ID3RBSection" class="collapsibleSection"><em>Null Argument Guidance Constructor</em>, or <em>NAG Constructor</em>, was the name originally coined for this concept.
        We believe it best encompasses both the means and (in its acronym form) the end.
      </div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="https://shecht.wordpress.com/2014/11/30/asyncactivator-targeting-multiple-platforms/" target="_blank">The original blog post</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright © Dmitry Shechtman 2014-2015</p></div></body></html>