<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Implementing an AsyncInit Interface</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="howto" /><meta name="Microsoft.Help.Id" content="c731bb1a-010a-40c6-856b-421ebbd05a26" /><meta name="Description" content="This topic details the procedure of defining a type that implements an AsyncInit interface." /><meta name="Microsoft.Help.ContentType" content="How To" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">AsyncInit<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="a920d297-289f-46ea-aa8b-338f484ad83c.htm" title="AsyncInit" tocid="roottoc">AsyncInit</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c0f9e874-dd33-473b-a245-85fc69447a4b.htm" title="How Tos" tocid="c0f9e874-dd33-473b-a245-85fc69447a4b">How Tos</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2ac5864f-d7ba-4ef7-a487-77ecfc2aab3a.htm" title="Installation" tocid="2ac5864f-d7ba-4ef7-a487-77ecfc2aab3a">Installation</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="edeb370d-6d7e-4f82-adab-f2326d89c857.htm" title="Deriving" tocid="edeb370d-6d7e-4f82-adab-f2326d89c857">Deriving</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="c731bb1a-010a-40c6-856b-421ebbd05a26.htm" title="Implementing" tocid="c731bb1a-010a-40c6-856b-421ebbd05a26">Implementing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f175305f-89a6-498e-add6-e803be90433e.htm" title="Silverlight" tocid="f175305f-89a6-498e-add6-e803be90433e">Silverlight</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn">Implementing an AsyncInit Interface</td></tr></table><span class="introStyle"></span><div class="summary"><p>This topic details the procedure of defining a type that implements an AsyncInit interface.</p></div><div class="introduction"><p>
        In some cases, a type cannot be derived from a particular <span class="code">AsyncInitBase</span> or <span class="code">CancelableAsyncInitBase</span>, e.g. when it must derive from a predefined base class.
        In such scenarios <span class="code">IAsyncInit</span> and <span class="code">ICancelableAsyncInit</span> should be used instead.
      </p></div><div class="subSection"><ol><li><p>
              Determine the types of the initialization arguments (if any), e.g. <span class="code">IProgress&lt;long&gt;</span>.
            </p></li><li><p>
              Implement the corresponding <span class="code">IAsyncInit</span> or <span class="code">ICancelableAsyncInit</span><em>(recommended)</em>:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Ditto.AsyncInit;

<span class="highlight-keyword">class</span> UniversalAnswerService : ICancelableAsyncInit&lt;IProgress&lt;<span class="highlight-keyword">long</span>&gt;&gt;
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> Answer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">async</span> Task ICancelableAsyncInit&lt;IProgress&lt;<span class="highlight-keyword">long</span>&gt;&gt;.InitAsync(IProgress&lt;<span class="highlight-keyword">long</span>&gt; progress, CancellationToken cancellationToken)
    {
        <span class="highlight-keyword">await</span> Task.Delay(TimeSpan.FromDays(<span class="highlight-number">7500000</span> * <span class="highlight-number">365.25</span>), cancellationToken);
        Answer = <span class="highlight-number">42</span>;
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAHAAA");</script></li><li><p>
              Implement a private parameterless constructor:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> UniversalAnswerService()
{
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAHAAA");</script></li><li><p>
              Implement a <span class="code">CreateAsync()</span> method:
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task&lt;UniversalAnswerService&gt; CreateAsync(IProgress&lt;<span class="highlight-keyword">long</span>&gt; progress, CancellationToken cancellationToken)
{
    <span class="highlight-keyword">return</span> AsyncActivator.CreateAsync&lt;UniversalAnswerService, IProgress&lt;<span class="highlight-keyword">long</span>&gt;&gt;(progress, cancellationToken);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAAHAAA");</script></li></ol></div><strong>Done!</strong> Your class may now be consumed asynchronously:
      <div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> service = <span class="highlight-keyword">await</span> UniversalAnswerService.CreateAsync(progress, cancellationToken);
<span class="highlight-keyword">var</span> answer = service.Answer;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAFAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="c0f9e874-dd33-473b-a245-85fc69447a4b.htm">How Tos</a></div><div class="seeAlsoStyle"><a href="edeb370d-6d7e-4f82-adab-f2326d89c857.htm">Deriving from an AsyncInit Base Class</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright © Dmitry Shechtman 2014-2015</p></div></body></html>